<?php

/**
 * @file
 * Metro specific Islandora functionality.
 */

define('METRODORA_ITEM_TAB_PERMISSION', 'view item description tab');

/**
 * Implements hook_islandora_oai_get_xsl_files().
 */
function metrodora_islandora_oai_get_xsl_files() {
  $files = file_scan_directory(drupal_get_path('module', 'metrodora') . '/transforms/', '/.*\.xslt?$/');

  $transform_options = array();

  foreach ($files as $file) {
    $transform_options[$file->uri] = $file->filename;
  }

  return $transform_options;
}

/**
 * Implements hook_islandora_oai_self_transform_params().
 */
function metrodora_islandora_oai_self_transform_params($islandora_object, $metadata_prefix) {
  $url = url("islandora/object/{$islandora_object->id}", array(
    'absolute' => TRUE,
    'language' => NULL,
  ));

  return array(
    '' => array('resource_url' => $url),
  );
}

/**
 * Implements hook_menu().
 */
function metrodora_menu() {
  $items = array();
  $items['islandora/object/%islandora_object/mods-metadata'] = array(
    'title' => 'MODS',
    'page callback' => 'metrodora_mods_tab',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'metrodora_mods_tab_access',
    'access arguments' => array(2),
    'file' => 'includes/metadata.inc',
    'weight' => 4,
  );
  $items['islandora/object/%islandora_object/download_mods-metadata'] = array(
    'title' => 'Download MODS XML',
    'type' => MENU_CALLBACK,
    'page callback' => 'metrodora_mods_complement_elements',
    'page arguments' => array(2),
    'access callback' => 'metrodora_mods_tab_access',
    'access arguments' => array(2),
    'delivery callback' => 'metrodora_mods_download',
    'file' => 'includes/utilities.inc',
  );
  $items['islandora/object/%islandora_object/edit_mods-metadata'] = array(
    'title' => 'Edit MODS XML',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'metrodora_mods_edit_callback',
    'page arguments' => array(2),
    'access callback' => 'metrodora_mods_edit_access',
    'access arguments' => array(2),
    'weight' => 10,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function metrodora_menu_alter(&$items) {
  // Change MARCXML tab position, if present.
  if (isset($items['islandora/object/%islandora_object/view_mods_as_marcxml'])) {
    $items['islandora/object/%islandora_object/view_mods_as_marcxml']['weight'] = 3;
    $items['islandora/object/%islandora_object/view_mods_as_marcxml']['title'] = 'MARC';
    $items['islandora/object/%islandora_object/view_mods_as_marcxml']['access callback'] = 'metrodora_marcxml_tab_access';
  }
}

/**
 * Implements hook_admin_paths().
 */
function metrodora_admin_paths() {
  // This little hook allows this menu items to be configured
  // to be openend in an Overlay plus other goodies.
  // It's more flexible than passing option with
  // fragment to drupal_goto.
  $paths = array();
  $paths['islandora/object/*/edit_mods-metadata'] = TRUE;
  return $paths;
}


/**
 * Access callback wrapper for viewing/downloading MODS datastream.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing a Fedora object.
 *
 * @return bool
 *   TRUE if the user can see/download Mods in-a-tab, FALSE otherwise.
 */
function metrodora_mods_tab_access(AbstractObject $object) {
  module_load_include('inc', 'metrodora', 'includes/utilities');
  $access = FALSE;
  // This disables mods tab for collection objects.
  if (is_object($object) && isset($object['MODS']) && !in_array('islandora:collectionCModel', $object->models)) {
    $access = islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $object['MODS']);
  }
  return $access;
}

/**
 * Access callback wrapper for viewing/downloading MARCXML datastream.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing a Fedora object.
 *
 * @return bool
 *   TRUE if the user can see/download Marcxml in-a-tab, FALSE otherwise.
 */
function metrodora_marcxml_tab_access(AbstractObject $object) {
  $access = FALSE;
  // This disables marcxml for collection objects.
  if (islandora_marcxml_access_callback($object) && !in_array('islandora:collectionCModel', $object->models)) {
    $access = TRUE;
  }
  return $access;
}

/**
 * Access callback wrapper for Editing MODS datastream.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing a Fedora object.
 *
 * @return bool
 *   TRUE if the user can Edit Mods, FALSE otherwise.
 */
function metrodora_mods_edit_access(AbstractObject $object) {
  module_load_include('inc', 'metrodora', 'includes/utilities');
  $access = FALSE;
  if (is_object($object) && isset($object['MODS'])) {
    module_load_include('inc', 'islandora', 'includes/utilities');
    // Mimics same functionality present in the manage tab -> datastreams.
    $edit_registry = islandora_build_datastream_edit_registry($object['MODS']);
    $access = count($edit_registry) > 0 && islandora_datastream_access(ISLANDORA_METADATA_EDIT, $object['MODS']);
  }
  return $access;
}

/**
 * Page callback wrapper for Editing MODS datastream.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing a Fedora object.
 */
function metrodora_mods_edit_callback(AbstractObject $object) {
  drupal_goto("islandora/object/{$object->id}/datastream/MODS/edit");
}

/**
 * Build up elements to enable for repeatable fields like Tags and Tabs.
 *
 * @param array $form
 *   An array representing a form within Drupal.
 * @param bool|string $field_key
 *   FALSE if the form itself is being iterated on, a string representation of
 *   the field otherwise.
 *
 * @return array
 *   An array containing references to form elements to be enabled.
 */
function metrodora_build_repeatable_element_array(&$form, $field_key = FALSE) {
  $elements = array();
  if (!empty($form)) {
    foreach (element_children($form) as $key) {
      if ($field_key) {
        $elements[] = &$form[$key][$field_key];
      }
      else {
        $elements[] = &$form[$key];
      }
    }
  }
  return $elements;
}

/**
 * Implements hook_islandora_derivative().
 *
 * This hook fires when an object/datastream is ingested or a datasteam is
 * modified, and is being used to clean the datastream of empty mod elements.
 */
function metrodora_islandora_derivative(AbstractObject $object = NULL) {
  $derivatives = array();

  $derivatives[] = array(
    'source_dsid' => 'MODS',
    'destination_dsid' => 'MODS',
    'function' => array(
      'metrodora_clean_mods_datastream',
    ),
    'file' => drupal_get_path('module', 'metrodora') . '/includes/clean_mods_datastream.inc',
    'weight' => -1,
  );

  return $derivatives;
}

/**
 * Implements hook_form_alter().
 *
 * Alter the collection search form to include the word 'for'
 * between the collection combo box and the search field, and
 * change the submit value to 'Go'.
 */
function metrodora_form_islandora_collection_search_form_alter(&$form, &$form_state, $form_id) {
  module_load_include('inc', 'islandora_collection_search', 'includes/search.form');

  // Change 'All collections' to read 'All Collections'.
  $form['simple']['collection_select']['#options']['all'] = t("All Collections");
  // Instead of 'submit', change the button value to 'Go'.
  $form['simple']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Go'),
  );
  // To add the element in the correct place in the form, adjust
  // the form element weights appropriately.
  $form['simple']['collection_select']['#weight'] = 0;
  $form['simple']['seperator'] = array(
    '#weight' => 1,
    '#access' => TRUE,
    '#type' => 'item',
    '#markup' => t('for'),
  );
  $form['simple']['islandora_simple_search_query']['#weight'] = 2;
  // Auto cap on first letter sucks on mobile.
  $form['simple']['islandora_simple_search_query']['#attributes'] = array(
    'autocapitalize' => "off",
    'autocorrect' => "off",
  );
  $form['simple']['submit']['#weight'] = 3;
}

/**
 * Implements hook_permission().
 */
function metrodora_permission() {
  return array(
    METRODORA_ITEM_TAB_PERMISSION => array(
      'title' => t('View item description tab'),
      'description' => t('Display the Item Description tab to the specified role.'),
    ),
  );
}

/**
 * Wrapper for permissions to view the item description tab.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing a Fedora object.
 *
 * @return bool
 *   TRUE if the user can see the tab, FALSE otherwise.
 */
function metrodora_item_description_tab_access(AbstractObject $object) {
  return islandora_object_access(METRODORA_ITEM_TAB_PERMISSION, $object) && metrodora_compound_child_metadata_access($object);
}

/**
 * Implements hook_theme().
 */
function metrodora_theme($existing, $type, $theme, $path) {
  return [
    'metrodora_slideshow_widget' => [
      'file' => 'theme/theme.inc',
      'template' => 'theme/metrodora-slideshow-widget',
      'pattern' => 'metrodora-slideshow-widget__',
    ],
  ];
}

/**
 * Implements hook_block_info().
 */
function metrodora_block_info() {
  $blocks['metrodora_slideshow_widget'] = [
    'info' => t('Islandora Objects Metrodora Slideshow'),
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => '<front>',
    'cache' => DRUPAL_NO_CACHE,
  ];
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function metrodora_block_view($delta = '') {
  $block = [];
  switch ($delta) {
    case 'metrodora_slideshow_widget':
          module_load_include('inc', 'metrodora', 'includes/blocks');
          $block['subject'] = NULL;
          $block['content'] = metrodora_slideshow_block();
      break;
    default:
  }
  return $block;
}

/**
 * Implements hook_block_configure().
 */
function metrodora_block_configure($delta = '') {
  $form = [];

  switch ($delta) {
    case 'metrodora_slideshow_widget':
      module_load_include('inc', 'islandora', 'includes/utilities');
      $options = islandora_get_content_models();
      $selected = variable_get(
        'metrodora_slideshow_enabled_content_models',
        ['islandora:sp_large_image_cmodel']
      );
      foreach ($selected as $cmodel) {
        if (isset($options[$cmodel])) {
          $options = [$cmodel => $options[$cmodel]] + $options;
        }
      }
      foreach ($options as $key => $value) {
        $rows[$key] = [
          'pid' => $key,
          'title' => $value['label'],
        ];
        in_array(
          $key,
          $selected
        ) ? $defaults[$key] = TRUE : $defaults[$key] = FALSE;
      }
      $header = [
        'pid' => ['data' => t('PID')],
        'title' => ['data' => t('Content Model')],
      ];

      $form['intro'] = [
        '#type' => 'item',
        '#title' => 'Select Islandora Content Models.',
        '#description' => t(
          'Only Objects with selected CMODELS will be included in the Slideshow'
        ),
      ];
      $form['the_table'] = [
        '#type' => 'tableselect',
        '#header' => $header,
        '#options' => $rows,
        '#default_value' => $defaults,
      ];

      break;
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function metrodora_block_save($delta = '', $edit = []) {
  switch ($delta) {
    case 'metrodora_slideshow_widget':
      $enabled = array_filter($edit['the_table']);
      variable_set('metrodora_slideshow_enabled_content_models', $enabled);
      break;
  }
}
