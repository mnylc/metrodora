<?php

/**
 * @file
 * Metro specific Islandora functionality.
 */

define('METRODORA_THEME_VIEW_IMAGE_FIELD', 'nothing');
define('METRODORA_THEME_VIEW_DESCRIPTION_FIELD', 'dc.description');
define('METRODORA_THEME_VIEW_COLLECTION_LINK_FIELD', 'nothing_1');
define('METRODORA_THEME_VIEW_ABOUT_COLLECTION_LINK_FIELD', 'nothing_2');
define('METRODORA_ITEM_TAB_PERMISSION', 'view item description tab');

/**
 * Implements hook_CMODEL_PID_islandora_overview_object().
 */
function metrodora_islandora_collectionCModel_islandora_overview_object(AbstractObject $object) {
  $total_results = 0;
  $rows = array();
  $model_query = metrodora_get_all_objects_query_info(array(
    'object' => $object,
    'page_size' => -1,
    'page_number' => 0,
    'vars' => '?model',
    'order_by' => FALSE,
  ));
  $models = (array) $object->repository->ri->query($model_query['query'], $model_query['type']);
  $ignore_models = array(
    'fedora-system:FedoraObject-3.0',
  );
  foreach ($models as $model) {
    $model_pid = $model['model']['value'];
    if (in_array($model_pid, $ignore_models)) {
      continue;
    }
    $model_count_query = metrodora_get_all_objects_query_info(array(
      'object' => $object,
      'page_size' => -1,
      'page_number' => 0,
      'order_by' => FALSE,
      'model' => "<info:fedora/$model_pid>",
    ));
    $model_object = islandora_object_load($model_pid);
    if (variable_get('islandora_basic_collection_disable_count_object', FALSE)) {
      $rows[$model_pid] = array(
        ($model_object ?
          l($model_object->label, "islandora/object/{$model_object->id}") :
          $model_pid),
      );
    }
    else {
      $model_count = $object->repository->ri->countQuery($model_count_query['query'], $model_count_query['type']);
      $total_results += $model_count;
      $rows[$model_pid] = array(
        ($model_object ?
          l($model_object->label, "islandora/object/{$model_object->id}") :
          $model_pid),
        $model_count,
      );
    }
  }

  $content = array(
    'total' => array(
      '#markup' => t('Total members: %total', array('%total' => $total_results)),
      '#weight' => 9,
    ),
    'table' => array(
      '#theme' => 'table',
      '#header' => array(
        'type' => array('data' => t('Type')),
        'count' => array('data' => t('Count')),
      ),
      '#rows' => $rows,
      '#empty' => t('Collection is empty.'),
      '#weight' => 10,
    ),

  );
  if (variable_get('islandora_basic_collection_disable_count_object', FALSE)) {
    unset($content['total']);
    unset($content['table']['#header']['count']);
  }
  return array(
    'metro_count' => array(
      '#markup' => drupal_render($content),
      '#weight' => 10,
    ),
  );
}

/**
 * Implements hook_CMODEL_PID_islandora_overview_object_alter().
 */
function metrodora_islandora_collectionCModel_islandora_overview_object_alter(AbstractObject $object, &$output) {
  // Modify the collection markup to say that these counts are only for visible
  // objects.
  $output['collection']['#markup'] = str_replace(t('Total members'), t('Total visible members'), $output['collection']['#markup']);
}

/**
 * Metro's awesomely custom display of everything without FILTERs.
 *
 * @param array $params
 *   An array containing all the parameters.
 *   At least:
 *   - object: An AbstractObject we're querying for.
 *   but may also contain:
 *   - page_size: The size of the page/number of results to return. Defaults to
 *   10.
 *   - page_number: An integer representing the offset as a multiple of
 *   page_size. Defaults to 0.
 *   - vars: A string containing the list of variables to select. Defaults to
 *   "?object ?title".
 *   - order_by: A string indicating which variable by which to sort. Defaults
 *   to "?title". May be set to FALSE to avoid sorting.
 *   - model: A string representing a URI. Defaults to "?model". Could be
 *   provided as "<info:fedora/cmodel:pid>" if the type of object to query
 *   should be filtered.
 * @param string $type
 *   Either 'view' or 'manage', its meant to repersent how the objects will be
 *   used.
 *
 * @throws Exception
 *   If the object parameter is not set.
 *
 * @return array
 *   An array containing a number of keys used to describe the query,
 *   including all the values from $params (which haven't been unset in the
 *   alter), in addition to:
 *   - query: The actual query string.
 *   - type: A string containing the type of query, likely one of:
 *   - itql; or,
 *   - sparql.
 *   - pid: The pid of the collection being queried.
 *
 * @see islandora_basic_collection_get_query_info()
 */
function metrodora_get_all_objects_query_info(array $params, $type = 'view') {
  if (!isset($params['object'])) {
    throw new Exception(t('!function requires "!object_parameter" to be given in the array of parameters.', array(
      '!function' => __FUNCTION__,
      '!object_parameter' => 'object',
    )));
  }

  // Add in defaults.
  $params += array(
    'page_number' => 0,
    'page_size' => 10,
    'vars' => '?object ?title ?owner ?date_modified',
    'order_by' => '?title',
    'model' => '?model',
  );

  $object = $params['object'];

  $query = <<<EOQ
SELECT DISTINCT !vars
FROM <#ri>
WHERE {
!statements .
}
EOQ;

  $query_statements = module_invoke_all('islandora_basic_collection_get_query_statements', $type);
  $query = format_string($query, array(
    '!statements' => implode(' . ', $query_statements),
    '!vars' => $params['vars'],
  ));
  $query = format_string($query, array(
    '!pid' => $object->id,
    '!model' => $params['model'],
  ));

  if ($params['order_by']) {
    $query .= <<<EOQO
ORDER BY {$params['order_by']}
EOQO;
  }

  $query_array = $params + array(
    'query' => $query,
    'type' => 'sparql',
    'pid' => $object->id,
  );
  return $query_array;
}

/**
 * Implements hook_islandora_oai_get_xsl_files().
 */
function metrodora_islandora_oai_get_xsl_files() {
  $files = file_scan_directory(drupal_get_path('module', 'metrodora') . '/transforms/', '/.*\.xslt?$/');

  $transform_options = array();

  foreach ($files as $file) {
    $transform_options[$file->uri] = $file->filename;
  }

  return $transform_options;
}

/**
 * Implements hook_islandora_oai_self_transform_params().
 */
function metrodora_islandora_oai_self_transform_params($islandora_object, $metadata_prefix) {
  $url = url("islandora/object/{$islandora_object->id}", array(
    'absolute' => TRUE,
    'language' => NULL,
  ));

  return array(
    '' => array('resource_url' => $url),
  );
}

/**
 * Implements hook_menu().
 */
function metrodora_menu() {
  $items = array();
  $items['islandora/object/%islandora_object/compound-parent-metadata'] = array(
    'title' => 'Object Description',
    'page callback' => 'metrodora_metadata_tab',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'metrodora_metadata_tab_access',
    'access arguments' => array(2),
    'file' => 'includes/metadata.inc',
    'weight' => 1,
  );
  $items['islandora/object/%islandora_object/compound-child-metadata'] = array(
    'title' => 'Item Description',
    'page callback' => 'metrodora_compound_child_metadata',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'metrodora_item_description_tab_access',
    'access arguments' => array(2),
    'file' => 'includes/metadata.inc',
    'weight' => 2,
  );
  $items['islandora/object/%islandora_object/mods-metadata'] = array(
    'title' => 'MODS',
    'page callback' => 'metrodora_mods_tab',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'metrodora_mods_tab_access',
    'access arguments' => array(2),
    'file' => 'includes/metadata.inc',
    'weight' => 4,
  );
  $items['islandora/object/%islandora_object/download_mods-metadata'] = array(
    'title' => 'Download MODS XML',
    'type' => MENU_CALLBACK,
    'page callback' => 'metrodora_mods_complement_elements',
    'page arguments' => array(2),
    'access callback' => 'metrodora_mods_tab_access',
    'access arguments' => array(2),
    'delivery callback' => 'metrodora_mods_download',
    'file' => 'includes/utilities.inc',
  );
  $items['islandora/object/%islandora_object/edit_mods-metadata'] = array(
    'title' => 'Edit MODS XML',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'metrodora_mods_edit_callback',
    'page arguments' => array(2),
    'access callback' => 'metrodora_mods_edit_access',
    'access arguments' => array(2),
    'weight' => 10,
  );
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function metrodora_menu_alter(&$items) {
  $items['islandora/object/%islandora_object/manage']['weight'] = 6;
  if (isset($items['islandora/object/%islandora_object/ip_embargo'])) {
    $items['islandora/object/%islandora_object/ip_embargo']['weight'] = 5;
  }
  // Remove the 'Print' tab if it exists.
  if (isset($items['islandora/object/%islandora_object/print'])) {
    // Remove the print tab, preserving the menu path.
    $items['islandora/object/%islandora_object/print_object']['type'] = MENU_CALLBACK;
  }
  // Change MARCXML tab position, if present.
  if (isset($items['islandora/object/%islandora_object/view_mods_as_marcxml'])) {
    $items['islandora/object/%islandora_object/view_mods_as_marcxml']['weight'] = 3;
    $items['islandora/object/%islandora_object/view_mods_as_marcxml']['title'] = 'MARC';
    $items['islandora/object/%islandora_object/view_mods_as_marcxml']['access callback'] = 'metrodora_marcxml_tab_access';
  }
}

/**
 * Implements hook_admin_paths().
 */
function metrodora_admin_paths() {
  // This little hook allows this menu items to be configured
  // to be openend in an Overlay plus other goodies.
  // It's more flexible than passing option with
  // fragment to drupal_goto.
  $paths = array();
  $paths['islandora/object/*/edit_mods-metadata'] = TRUE;
  return $paths;
}

/**
 * Implements hook_form_alter().
 */
function metrodora_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'xml_form_builder_datastream_form' || $form_id == 'xml_form_builder_ingest_form' && isset($form['#title']) && $form['#title'] == 'METRO MODS Form') {
    module_load_include('inc', 'islandora', 'includes/utilities');

    if ($form_id === 'xml_form_builder_ingest_form') {
      module_load_include('inc', 'islandora', 'includes/ingest.form');
      $shared_storage = islandora_ingest_form_get_shared_storage($form_state);
      $object = $shared_storage['parent'];
      $namespace = islandora_get_namespace($object);
      $elements_to_enable = metrodora_build_variable_elements_array($form);
      metrodora_modify_namespace_specific_fields($form, $elements_to_enable, $namespace);
    }
    else {
      // Check if "update" is set so we only modify the second step on editing
      // a MODS form.
      if (isset($form['update'])) {
        $namespace = islandora_get_namespace($form_state['pid']);
        if ($namespace) {
          $elements_to_enable = metrodora_build_variable_elements_array($form);
          metrodora_modify_namespace_specific_fields($form, $elements_to_enable, $namespace);
        }
      }
    }
  }
  // Disable autocapitalization on login form items.
  if ($form_id == 'user_login') {
    $form['name']['#attributes'] = array(
      'autocapitalize' => "off",
      'autocorrect' => "off",
    );
    $form['pass']['#attributes'] = array(
      'autocapitalize' => "off",
      'autocorrect' => "off",
    );
  }
}

/**
 * Access callback for viewing parent/current object metadata tab.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing a Fedora object.
 *
 * @return bool
 *   TRUE if the user can see the tab, FALSE otherwise.
 */
function metrodora_metadata_tab_access(AbstractObject $object) {
  module_load_include('inc', 'metrodora', 'includes/utilities');
  $compound_info = islandora_compound_object_retrieve_compound_info($object);
  return $compound_info || in_array('islandora:compoundCModel', $object->models) ||
    !array_diff($object->models, metrodora_metadata_tab_cmodels());
}

/**
 * Access callback wrapper for viewing/downloading MODS datastream.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing a Fedora object.
 *
 * @return bool
 *   TRUE if the user can see/download Mods in-a-tab, FALSE otherwise.
 */
function metrodora_mods_tab_access(AbstractObject $object) {
  module_load_include('inc', 'metrodora', 'includes/utilities');
  $access = FALSE;
  // This disables mods tab for collection objects.
  if (is_object($object) && isset($object['MODS']) && !in_array('islandora:collectionCModel', $object->models)) {
    $access = islandora_datastream_access(ISLANDORA_VIEW_OBJECTS, $object['MODS']);
  }
  return $access;
}

/**
 * Access callback wrapper for viewing/downloading MARCXML datastream.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing a Fedora object.
 *
 * @return bool
 *   TRUE if the user can see/download Marcxml in-a-tab, FALSE otherwise.
 */
function metrodora_marcxml_tab_access(AbstractObject $object) {
  $access = FALSE;
  // This disables marcxml for collection objects.
  if (islandora_marcxml_access_callback($object) && !in_array('islandora:collectionCModel', $object->models)) {
    $access = TRUE;
  }
  return $access;
}

/**
 * Access callback wrapper for Editing MODS datastream.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing a Fedora object.
 *
 * @return bool
 *   TRUE if the user can Edit Mods, FALSE otherwise.
 */
function metrodora_mods_edit_access(AbstractObject $object) {
  module_load_include('inc', 'metrodora', 'includes/utilities');
  $access = FALSE;
  if (is_object($object) && isset($object['MODS'])) {
    module_load_include('inc', 'islandora', 'includes/utilities');
    // Mimics same functionality present in the manage tab -> datastreams.
    $edit_registry = islandora_build_datastream_edit_registry($object['MODS']);
    $access = count($edit_registry) > 0 && islandora_datastream_access(ISLANDORA_METADATA_EDIT, $object['MODS']);
  }
  return $access;
}

/**
 * Page callback wrapper for Editing MODS datastream.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing a Fedora object.
 */
function metrodora_mods_edit_callback(AbstractObject $object) {
  drupal_goto("islandora/object/{$object->id}/datastream/MODS/edit");
}

/**
 * Access callback for viewing child metadata tab.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing a Fedora object.
 *
 * @return bool
 *   TRUE if the user can see the tab, FALSE otherwise.
 */
function metrodora_compound_child_metadata_access(AbstractObject $object) {
  $children = islandora_compound_object_get_parts($object);
  $pid = (!empty($children)) ? $children[0] : $object->id;
  $compound_object = islandora_object_load($pid);
  return islandora_compound_object_retrieve_compound_info($compound_object);
}

/**
 * Build up elements to enable for repeatable fields like Tags and Tabs.
 *
 * @param array $form
 *   An array representing a form within Drupal.
 * @param bool|string $field_key
 *   FALSE if the form itself is being iterated on, a string representation of
 *   the field otherwise.
 *
 * @return array
 *   An array containing references to form elements to be enabled.
 */
function metrodora_build_repeatable_element_array(&$form, $field_key = FALSE) {
  $elements = array();
  if (!empty($form)) {
    foreach (element_children($form) as $key) {
      if ($field_key) {
        $elements[] = &$form[$key][$field_key];
      }
      else {
        $elements[] = &$form[$key];
      }
    }
  }
  return $elements;
}

/**
 * Modifies fields specific to namespaces for METRO's MODS form.
 *
 * @param array $form
 *   An array representing a form within Drupal.
 * @param array $elements_to_enable
 *   An array containing references to form elements to be enabled.
 * @param string $namespace
 *   A string holding the namespace of the collection being ingested into.
 */
function metrodora_modify_namespace_specific_fields(&$form, &$elements_to_enable, $namespace) {
  if (isset($elements_to_enable[$namespace])) {
    foreach ($elements_to_enable[$namespace] as &$element) {
      $element['#access'] = TRUE;
    }
  }
  // Handle collection specific options adding of options.
  if ($namespace == 'murrayhill') {
    $notes = metrodora_build_repeatable_element_array($form['notes']);
    foreach ($notes as &$element) {
      $element['type']['#options']['provenance'] = t('Provenance');
    }
    unset($element);
  }
  elseif ($namespace == 'waterways') {
    $notes = metrodora_build_repeatable_element_array($form['notes']);
    foreach ($notes as &$element) {
      $element['type']['#options']['publishinginfo'] = t('Publishing Info');
    }
    unset($element);
  }
}

/**
 * Implements hook_islandora_xml_form_builder_forms().
 */
function metrodora_islandora_xml_form_builder_forms() {
  $module_path = drupal_get_path('module', 'metrodora');
  return array(
    'METRO MODS Form' => array(
      'form_file' => "$module_path/xml/metro_mods_form.xml",
    ),
  );
}

/**
 * Implements hook_islandora_xml_form_builder_form_associations().
 */
function metrodora_islandora_xml_form_builder_form_associations() {
  $to_return = array();
  $base_array = array(
    'form_name' => 'METRO MODS Form',
    'dsid' => 'MODS',
    'title_field' => array('titleInfo', '0', 'title'),
    'template' => FALSE,
    'transform' => 'No Transform',
  );

  $associations = array(
    'metro_compound_mods_form' => 'islandora:compoundCModel',
    'metro_image_mods_form' => 'islandora:sp_basic_image',
    'metro_large_image_mods_form' => 'islandora:sp_large_image_cmodel',
    'metro_pdf_mods_form' => 'islandora:sp_pdf',
  );
  foreach ($associations as $key => $content_model) {
    $to_return[$key] = $base_array + array('content_model' => $content_model);
  }
  return $to_return;
}

/**
 * Helper function to build up references to elements to enable.
 *
 * @param array $form
 *   An array containing the Drupal form.
 *
 * @return array
 *   An array where the keys are the namespace and the values are the
 *   references to the elements we are to enable.
 */
function metrodora_build_variable_elements_array(&$form) {
  $elements_to_enable = array(
    'murrayhill' => array(),
    'zoomaps' => array(),
    'bronxpark' => array(
      &$form['relatedItemFieldset']['relatedSeries'],
    ),
    'albadigitallibrary' => array(
      &$form['relatedItemFieldset']['relatedNote'],
      &$form['relatedItemFieldset']['relatedSource'],
      &$form['relatedItemFieldset']['relatedResource'],
    ),
    'bklynsheetmusic' => array(
      &$form['relatedItemFieldset']['relatedResource'],
    ),
    'cuny34thstreet' => array(
      &$form['relatedItemFieldset']['appearsIn'],
    ),
    'snugharbor' => array(
      &$form['relatedItemFieldset']['appearsIn'],
    ),
    'lesbianherstory' => array(),
    'childhoodinbronx' => array(
      &$form['relatedItemFieldset']['relatedExhibit'],
    ),
  );
  // Get all repeatable elements that are tab panels that need to be
  // modified.
  $display_label = metrodora_build_repeatable_element_array($form['notes'], 'displayLabel');
  if (!empty($display_label)) {
    $elements_to_enable['cuny34thstreet'] = array_merge($elements_to_enable['cuny34thstreet'], $display_label);
    $elements_to_enable['snugharbor'] = array_merge($elements_to_enable['snugharbor'], $display_label);
  }

  return $elements_to_enable;
}

/**
 * Implements hook_CMODEL_pid_islandora_view_object_alter().
 *
 * Customizations to metadata display for the children of compounds.
 */
function metrodora_islandora_view_object_alter(&$object, &$rendered) {
  if (metrodora_compound_child_metadata_access($object)) {
    // Looping over each key as the target is not keyed.
    foreach ($rendered as $key => $val) {
      // We'll assume that the empty string is solution pack markup and skip.
      if (!isset($rendered[$key]['#markup'])) {
        continue;
      }
      $markup = new DOMDocument('1.0', 'utf-8');
      // Temporarily suppress warnings on malformed DC data.
      @$markup->loadHTML($rendered[$key]['#markup']);
      $xpath = new DOMXpath($markup);

      // Clear out metadata.
      $result = $xpath->query('//fieldset[contains(@class, "islandora-metadata")]');
      // Should only be one of these.
      $parent_node = FALSE;
      foreach ($result as $element) {
        $parent_node = $element->parentNode;
        $parent_node->removeChild($element);
        break;
      }

      // Replace description with parents.
      $descriptions = $xpath->query('//p[@property="description"]');
      $compound_info  = islandora_compound_object_retrieve_compound_info($object);
      // Only do it on children as it will display on the parent.
      $parent_compound = FALSE;
      if (isset($compound_info['parent_pid'])) {
        $parent_compound = islandora_object_load($compound_info['parent_pid']);
        $dc = DublinCore::importFromXMLString($parent_compound['DC']->content)->asArray();
        $description_replacement = $dc['dc:description']['value'];
        foreach ($descriptions as $element) {
          // Remove or replace description.
          if (!$description_replacement) {
            $element->parentNode->parentNode->removeChild($element->parentNode);
          }
          else {
            $element->nodeValue = $description_replacement;
          }
        }
        // Handle the case where the child has no description element.
        if (!$descriptions->length && $description_replacement) {
          $divs = $xpath->query('//div[h2/text()="In collections"]');
          foreach ($divs as $div) {
            $new_description_element = $markup->createElement('p', $description_replacement);
            $new_description_header = $markup->createElement('h2', 'Description');
            $div->insertBefore(
              $new_description_element,
              $div->firstChild
            );
            $div->insertBefore(
              $new_description_header,
              $new_description_element
            );
          }
        }
      }

      // Update HTML to be rendered only if changed.
      if ($parent_node || $parent_compound) {
        $rendered[$key]['#markup'] = $markup->saveHTML();
      }
    }
  }
}

/**
 * Implements hook_islandora_compound_object_management_control_paths().
 */
function metrodora_islandora_compound_object_management_control_paths() {
  return array(
    'islandora/object/%/compound-parent-metadata',
    'islandora/object/%/compound-child-metadata',
  );
}

/**
 * Implements xml_form_builder_definition_alter().
 *
 * Tab panel elements that you wish to grant access to based on collection
 * needs to be done in a modify to the original xml form definition before it
 * is loaded into the form. Only Needed to modify for murrayhill and zoomaps.
 * IMPORTANT: since this modifies the xml of the form template before it is
 * loaded you only need to set access on the first element in the tab panel
 * and the reset will be done through inheritance when the form is actually
 * loaded.
 *
 * @param array $form
 *   The form array before the initial form builder XML is saved in.
 * @param array $form_state
 *   The form_state array.
 */
function metrodora_xml_form_builder_get_form_modify_definition_alter(&$form, &$form_state) {
  module_load_include('inc', 'islandora', 'includes/utilities');
  $object = menu_get_object('islandora_object', 2);
  if ($object) {
    $namespace = islandora_get_namespace($object);
    if ($namespace == 'murrayhill') {
      // Grant access to the cartographicsFieldset and coordinates field.
      $form['subjects'][0]['cartographicsFieldset']['#access'] = 1;
      $form['subjects'][0]['cartographicsFieldset']['coordinates']['#access'] = 1;

      // Grant access to hierarchicalGeographicFieldset and citySection field.
      $form['subjects'][0]['hierarchicalGeographicFieldset']['#access'] = 1;
      $form['subjects'][0]['hierarchicalGeographicFieldset']['citySection']['#access'] = 1;
    }
    if ($namespace == 'zoomaps') {
      // Grant access to the cartographic fieldset and scale field.
      $form['subjects'][0]['cartographicsFieldset']['#access'] = 1;
      $form['subjects'][0]['cartographicsFieldset']['scale']['#access'] = 1;
    }
    if ($namespace == 'lesbianherstory') {
      $form['description'][0]['type']['#access'] = 1;
    }
  }
}

/**
 * Implements hook_islandora_derivative().
 *
 * This hook fires when an object/datastream is ingested or a datasteam is
 * modified, and is being used to clean the datastream of empty mod elements.
 */
function metrodora_islandora_derivative(AbstractObject $object = NULL) {
  $derivatives = array();

  $derivatives[] = array(
    'source_dsid' => 'MODS',
    'destination_dsid' => 'MODS',
    'function' => array(
      'metrodora_clean_mods_datastream',
    ),
    'file' => drupal_get_path('module', 'metrodora') . '/includes/clean_mods_datastream.inc',
    'weight' => -1,
  );

  return $derivatives;
}

/**
 * Implements hook_form_alter().
 *
 * Alter the collection search form to include the word 'for'
 * between the collection combo box and the search field, and
 * change the submit value to 'Go'.
 */
function metrodora_form_islandora_collection_search_form_alter(&$form, &$form_state, $form_id) {
  module_load_include('inc', 'islandora_collection_search', 'includes/search.form');

  // Change 'All collections' to read 'All Collections'.
  $form['simple']['collection_select']['#options']['all'] = t("All Collections");
  // Instead of 'submit', change the button value to 'Go'.
  $form['simple']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Go'),
  );
  // To add the element in the correct place in the form, adjust
  // the form element weights appropriately.
  $form['simple']['collection_select']['#weight'] = 0;
  $form['simple']['seperator'] = array(
    '#weight' => 1,
    '#access' => TRUE,
    '#type' => 'item',
    '#markup' => t('for'),
  );
  $form['simple']['islandora_simple_search_query']['#weight'] = 2;
  // Auto cap on first letter sucks on mobile.
  $form['simple']['islandora_simple_search_query']['#attributes'] = array(
    'autocapitalize' => "off",
    'autocorrect' => "off",
  );
  $form['simple']['submit']['#weight'] = 3;
}

/**
 * Alter the image_field_caption field to look like it takes a URL.
 */
function metrodora_field_widget_form_alter(&$element, &$form_state, $context) {
  // Add display_field setting to field because file_field_widget_form() assumes
  // it is set.
  $instance = $context['instance'];
  $settings = $instance['settings'];

  if (isset($settings['image_field_caption']) && $instance['widget']['type'] == 'image_image' && $settings['image_field_caption']) {
    foreach (element_children($element) as $delta) {
      // Add all extra functionality provided by the image widget.
      $element[$delta]['#process'][] = 'metrodora_image_field_caption_widget_process';
    }
  }
}

/**
 * An element #process callback for the image_image field type.
 *
 * Expands the image_image type to include the alt and title fields.
 */
function metrodora_image_field_caption_widget_process($element, &$form_state, $form) {
  // Add the additional alt and title fields.
  $element['image_field_caption']['#title'] = t('Link');
  $element['image_field_caption']['#base_type'] = 'textfield';
  $element['image_field_caption']['#format'] = 'plain_text';
  $element['image_field_caption']['#description'] = 'The link the image will redirect to.';

  // Overide alt title and description for our use case.
  $element['alt']['#title'] = t('Caption');
  $element['alt']['#description'] = t('This text will appear under the Title text when user hovers mouse over Title text');

  return $element;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Increases text field length.
 */
function metrodora_form_views_exposed_form_alter(&$form) {
  if ($form['#id'] == 'views-exposed-form-islandora-usage-stats-report-page') {
    $form['label']['#size'] = 100;
  }
}

/**
 * Implements hook_permission().
 */
function metrodora_permission() {
  return array(
    METRODORA_ITEM_TAB_PERMISSION => array(
      'title' => t('View item description tab'),
      'description' => t('Display the Item Description tab to the specified role.'),
    ),
  );
}

/**
 * Wrapper for permissions to view the item description tab.
 *
 * @param AbstractObject $object
 *   An AbstractObject representing a Fedora object.
 *
 * @return bool
 *   TRUE if the user can see the tab, FALSE otherwise.
 */
function metrodora_item_description_tab_access(AbstractObject $object) {
  return islandora_object_access(METRODORA_ITEM_TAB_PERMISSION, $object) && metrodora_compound_child_metadata_access($object);
}
